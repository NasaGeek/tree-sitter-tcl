================================================================================
Commands
================================================================================

echo "hello"

set hi "heelo"

--------------------------------------------------------------------------------

(source_file
  (command
    (simple_word)
    (quoted_word))
  (set
    (simple_word)
    (quoted_word)))

================================================================================
Commands with strange barewords
================================================================================

join , - -flag

--------------------------------------------------------------------------------

(source_file
  (command
    (simple_word)
    (simple_word)
    (simple_word)
    (simple_word)))

================================================================================
Procedures
================================================================================

proc foo {arg1 arg2} {
    echo "hello"
    echo "word$hi \$bye word"
}

--------------------------------------------------------------------------------

(source_file
  (procedure
    (simple_word)
    (arguments
      (argument
        (simple_word))
      (argument
        (simple_word)))
    (script
      (command
        (simple_word)
        (quoted_word))
      (command
        (simple_word)
        (quoted_word
          (variable_substitution
            (id))
          (escaped_character))))))

================================================================================
Comments
================================================================================

# this is a comment

--------------------------------------------------------------------------------

(source_file
  (comment))

================================================================================
Foreach
================================================================================

foreach a {1 2 3 4 5} {
    put $i
}

--------------------------------------------------------------------------------

(source_file
  (foreach
    (foreach_clauses
      (foreach_clause
        (simple_word)
        (braced_word)))
    (script
      (command
        (simple_word)
        (variable_substitution
          (id))))))

================================================================================
Foreach multi
================================================================================

foreach {a b} {1 2 4 5} {
    put $i
}

--------------------------------------------------------------------------------

(source_file
  (foreach
    (foreach_clauses
      (foreach_clause
        (braced_word)
        (braced_word)))
    (script
      (command
        (simple_word)
        (variable_substitution
          (id))))))

================================================================================
Foreach multimulti
================================================================================

foreach a {1 2 4 5} b {6 7 8 9} {
    put $i
}

--------------------------------------------------------------------------------

(source_file
  (foreach
    (foreach_clauses
      (foreach_clause
        (simple_word)
        (braced_word))
      (foreach_clause
        (simple_word)
        (braced_word)))
    (script
      (command
        (simple_word)
        (variable_substitution
          (id))))))

================================================================================
Conditionals
================================================================================

if 1 then {
    echo hi
} elseif {t} {
    echo hi
} else {
    echo bye
}

--------------------------------------------------------------------------------

(source_file
  (conditional
    (expr
      (int_literal))
    (script
      (command
        (simple_word)
        (simple_word)))
    (elseif
      (expr
        (bool_literal))
      (script
        (command
          (simple_word)
          (simple_word))))
    (else
      (script
        (command
          (simple_word)
          (simple_word))))))

================================================================================
Command substitution
================================================================================

echo [echo hello]

--------------------------------------------------------------------------------

(source_file
  (command
    (simple_word)
    (command_substitution
      (command
        (simple_word)
        (simple_word)))))

================================================================================
Escaped string
================================================================================

echo "word$hi \$bye word"

--------------------------------------------------------------------------------

(source_file
  (command
    (simple_word)
    (quoted_word
      (variable_substitution
        (id))
      (escaped_character))))

================================================================================
Array set
================================================================================

set arr(my) 0
set arr(a,b) 0
set arr(}) 0
set arr({) 0
set arr(]) 0
set arr() 0
set arr(") 0
set arr(${f}_f) 0
set arr($arr(a)) 0

--------------------------------------------------------------------------------

(source_file
  (set
    (array_name
      (simple_word)
      (array_index_word))
    (simple_word))
  (set
    (array_name
      (simple_word)
      (array_index_word))
    (simple_word))
  (set
    (array_name
      (simple_word)
      (array_index_word))
    (simple_word))
  (set
    (array_name
      (simple_word)
      (array_index_word))
    (simple_word))
  (set
    (array_name
      (simple_word)
      (array_index_word))
    (simple_word))
  (set
    (array_name
      (simple_word))
    (simple_word))
  (set
    (array_name
      (simple_word)
      (array_index_word))
    (simple_word))
  (set
    (array_name
      (simple_word)
      (variable_substitution)
      (array_index_word))
    (simple_word))
  (set
    (array_name
      (simple_word)
      (variable_substitution
        (array_ref
          (id)
          (array_index_word))))
    (simple_word)))

================================================================================
Array ref
================================================================================

puts $arr(my)
puts $a($a$a)
# The comma doesn't terminate the word as it would in the $a,b case
puts $a(a,b)
puts $j($a,$b)
set $arr(})
set $arr({)
set $arr(])
set $arr()
set $arr(")
set $arr(${f}_f)
set $arr($arr(a))

--------------------------------------------------------------------------------

(source_file
  (command
    (simple_word)
    (variable_substitution
      (array_ref
        (id)
        (array_index_word))))
  (command
    (simple_word)
    (variable_substitution
      (array_ref
        (id)
        (variable_substitution
          (id))
        (variable_substitution
          (id)))))
  (comment)
  (command
    (simple_word)
    (variable_substitution
      (array_ref
        (id)
        (array_index_word))))
  (command
    (simple_word)
    (variable_substitution
      (array_ref
        (id)
        (variable_substitution
          (id))
        (array_index_word)
        (variable_substitution
          (id)))))
  (set
    (variable_substitution
      (array_ref
        (id)
        (array_index_word))))
  (set
    (variable_substitution
      (array_ref
        (id)
        (array_index_word))))
  (set
    (variable_substitution
      (array_ref
        (id)
        (array_index_word))))
  (set
    (variable_substitution
      (array_ref
        (id))))
  (set
    (variable_substitution
      (array_ref
        (id)
        (array_index_word))))
  (set
    (variable_substitution
      (array_ref
        (id)
        (variable_substitution)
        (array_index_word))))
  (set
    (variable_substitution
      (array_ref
        (id)
        (variable_substitution
          (array_ref
            (id)
            (array_index_word)))))))

================================================================================
Namespaced vars
================================================================================

puts $::ns::var
puts $ns::var
set ::var 1
set var::v 1
lassign [list 1] ::ns::var(key)

--------------------------------------------------------------------------------

(source_file
  (command
    (simple_word)
    (variable_substitution
      (id)))
  (command
    (simple_word)
    (variable_substitution
      (id)))
  (set
    (simple_word)
    (simple_word))
  (set
    (simple_word)
    (simple_word))
  (command
    (simple_word)
    (command_substitution
      (command
        (simple_word)
        (simple_word)))
    (array_name
      (simple_word)
      (array_index_word))))

================================================================================
Exprs
================================================================================

expr {1 + 1}
expr {3. / 4e-4}
expr {t eq tr}
expr { nO || Of }
expr { inf + nan - (1) + [p 1] }
expr { {} eq {123} }
expr { $arr(abc) eq [a ::ar(xyz)] }
expr { func() eq -1 }
expr { func(1, 2) }
expr { spaceyfunc   ( "yes", [this], {works} ) }

--------------------------------------------------------------------------------

(source_file
  (expr_cmd
    (expr
      (binop_expr
        (int_literal)
        (int_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (float_literal)
        (float_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (bool_literal)
        (bool_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (bool_literal)
        (bool_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (binop_expr
          (binop_expr
            (float_literal)
            (float_literal))
          (int_literal))
        (command_substitution
          (command
            (simple_word)
            (simple_word))))))
  (expr_cmd
    (expr
      (binop_expr
        (braced_word)
        (braced_word))))
  (expr_cmd
    (expr
      (binop_expr
        (variable_substitution
          (array_ref
            (id)
            (array_index_word)))
        (command_substitution
          (command
            (simple_word)
            (array_name
              (simple_word)
              (array_index_word)))))))
  (expr_cmd
    (expr
      (binop_expr
        (func_call
          (restricted_simple_word))
        (unary_expr
          (int_literal)))))
  (expr_cmd
    (expr
      (func_call
        (restricted_simple_word)
        (func_args
          (int_literal)
          (int_literal)))))
  (expr_cmd
    (expr
      (func_call
        (restricted_simple_word)
        (func_args
          (quoted_word)
          (command_substitution
            (command
              (simple_word)))
          (braced_word))))))

================================================================================
Exprs in other places
================================================================================

if $a {
} elseif {1 eq 2} {}
if {
1
} {
puts "good"
}
while f {}

--------------------------------------------------------------------------------

(source_file
  (conditional
    (expr
      (variable_substitution
        (id)))
    (script)
    (elseif
      (expr
        (binop_expr
          (int_literal)
          (int_literal)))
      (script)))
  (conditional
    (expr
      (int_literal))
    (script
      (command
        (simple_word)
        (quoted_word))))
  (while
    (expr
      (bool_literal))
    (script)))

================================================================================
Try
================================================================================

try { some code
} on error {} {
} on continue {var1 var2} {
  puts "continue"
} trap {PATTERN} {} {
} finally { done }

--------------------------------------------------------------------------------

(source_file
  (try
    (script
      (command
        (simple_word)
        (simple_word)))
    (braced_word)
    (script)
    (braced_word)
    (script
      (command
        (simple_word)
        (quoted_word)))
    (braced_word)
    (braced_word)
    (script)
    (finally
      (script
        (command
          (simple_word))))))

================================================================================
For
================================================================================

for {set a 0} {$a < 10} {incr a} { puts $a }
for {set a 0} {$a < 10} {} {
}

--------------------------------------------------------------------------------

(source_file
  (for
    (script
      (set
        (simple_word)
        (simple_word)))
    (expr
      (binop_expr
        (variable_substitution
          (id))
        (int_literal)))
    (script
      (command
        (simple_word)
        (simple_word)))
    (script
      (command
        (simple_word)
        (variable_substitution
          (id)))))
  (for
    (script
      (set
        (simple_word)
        (simple_word)))
    (expr
      (binop_expr
        (variable_substitution
          (id))
        (int_literal)))
    (script)
    (script)))

================================================================================
Switch
================================================================================

switch -glob aaab {
    b       -
    r_rr     {[rrr]}
    *      {a}
    default {}
}

--------------------------------------------------------------------------------

(source_file
  (switch
    (simple_word)
    (simple_word)
    (switch_body
      (simple_word)
      (script)
      (simple_word)
      (script
        (command
          (command_substitution
            (command
              (simple_word)))))
      (simple_word)
      (script
        (command
          (simple_word)))
      (simple_word)
      (script))))

===
Command substitution of full scripts
===

puts [
p a
rty; party
]
---

(source_file
  (command
    (simple_word)
    (command_substitution
      (command
        (simple_word)
        (simple_word))
      (command
        (simple_word))
      (command
        (simple_word)))))

=======
Variable substitution characters
=======

puts $::2::1
puts $_::_
puts [func]1
---

(source_file
  (command
    (simple_word)
    (variable_substitution
      (id)))
  (command
    (simple_word)
    (variable_substitution
      (id)))
  (command
    (simple_word)
    (command_substitution
      (command
        (simple_word)))
    (concat)
    (simple_word)))

================================================================================
Exprs with newlines
================================================================================

expr {1
+ 1
}
expr {3. /
4e-4}
expr {
  t
eq tr}
expr { nan - (
1
)}
expr { arr
(f,t) eq arr(
123
,
456)
}
--------------------------------------------------------------------------------

(source_file
  (expr_cmd
    (expr
      (binop_expr
        (int_literal)
        (int_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (float_literal)
        (float_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (bool_literal)
        (bool_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (float_literal)
        (int_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (func_call
          (restricted_simple_word)
          (func_args
            (bool_literal)
            (bool_literal)))
        (func_call
          (restricted_simple_word)
          (func_args
            (int_literal)
            (int_literal)))))))

================================================================================
Braceless exprs
================================================================================

expr 1+1
expr 1
expr 3./4e-4
expr t==f
expr func(1,2)
----

(source_file
  (expr_cmd
    (expr
      (binop_expr
        (int_literal)
        (int_literal))))
  (expr_cmd
    (expr
      (int_literal)))
  (expr_cmd
    (expr
      (binop_expr
        (float_literal)
        (float_literal))))
  (expr_cmd
    (expr
      (binop_expr
        (bool_literal)
        (bool_literal))))
  (expr_cmd
    (expr
      (func_call
        (restricted_simple_word)
        (func_args
          (int_literal)
          (int_literal))))))

===
Force eval as script
===

puts [string cat {this is a script}]
puts {this is not a script}
---

(source_file
  (command
    (simple_word)
    (command_substitution
      (command
        (simple_word)
        (simple_word)
        (script
          (command
            (simple_word)
            (simple_word)
            (simple_word)
            (simple_word))))))
  (command
    (simple_word)
    (braced_word)))

===
Escapes in bare words
===
this\cmd
this\$cmd
---

(source_file
  (command
    (simple_word)
    (concat)
    (escaped_character)
    (concat)
    (simple_word))
  (command
    (simple_word)
    (concat)
    (escaped_character)
    (concat)
    (simple_word)))

===
Line continuations
===
puts \
"a string"
puts\
"a string"
puts\
 "a string"
puts "\
a string"
puts {\
a string}
cmd\
with\
args
cmd \
with \
args
# comment\
with cont
# comment \
# with cont
---

(source_file
  (command
    name: (simple_word)
    arguments: (quoted_word))
  (command
    name: (simple_word)
    arguments: (quoted_word))
  (command
    name: (simple_word)
    arguments: (quoted_word))
  (command
    name: (simple_word)
    arguments: (quoted_word))
  (command
    name: (simple_word)
    arguments: (braced_word))
  (command
    name: (simple_word)
    arguments: (simple_word)
    arguments: (simple_word))
  (command
    name: (simple_word)
    arguments: (simple_word)
    arguments: (simple_word))
  (comment)
  (comment))
